kind: ConfigMap
apiVersion: v1
metadata:
  name: default-nginx
data:
  default.conf: |

    map $request_uri $accessloggable {
        /favicon.ico 0;
        /robots.txt 0;
        "~* ^/.well-known/" 0;
        /health 0;
        /ads.txt 0;
        default 1;
    }

    server {
      server_name _;
      root /var/www/docroot;
      sendfile off;
      listen 80;

      access_log /var/log/nginx/access.log combined if=$accessloggable;

      proxy_set_header X-Original-Forwarded-For $http_x_forwarded_for;

      location = /favicon.ico {
        log_not_found off;
      }

      # Disable the metrics endpoint, it currently passes to PHP and can overload
      location /metrics {
        error_log off;
        deny all;
      }

      location ~ ^/php-fpm-(status|ping)$ {
        access_log off;
        allow 127.0.0.1;
        deny all;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_pass 127.0.0.1:9000;
      }

      location = /robots.txt {
        allow all;
        log_not_found off;
      }

      # Allow "Well-Known URIs" as per RFC 5785
      location ~* ^/.well-known/ {
        allow all;
      }

      # ads.txt is a way to declare authorized sellers, see:
      # https://support.google.com/dfp_premium/answer/7441288?hl=en
      location = /ads.txt {
        allow all;
        log_not_found off;
        # Some sites are using a php (drupal) originated 302 redirect to obtain ads.txt
        try_files $uri /index.php;
      }

      # Very rarely should these ever be accessed outside of your lan
      # Added sql, bak, yml/yaml, twig and theme files to blacklist here, to prevent info leaking - MEA
      location ~* \.(txt|log|sql|bak|yaml|yml|theme|twig)$ {
        allow 192.168.0.0/16;
        deny all;
      }

      # Do not allow requests to php files in directories above this
      location ~ \..*/.*\.php$ {
        return 403;
      }

      location ~ ^/sites/.*/private/ {
        return 403;
      }

      # Block access to "hidden" files and directories whose names begin with a
      # period. This includes directories used by version control systems such
      # as Subversion or Git to store control files.
      location ~ (^|/)\. {
        return 403;
      }

      location / {
        try_files $uri /index.php?$query_string;
      }

      location @rewrite {
        rewrite ^/(.*)$ /index.php?q=$1;
      }

      # In Drupal 8, we must also match new paths where the '.php' appears in the middle,
      # such as update.php/selection. The rule we use is strict, and only allows this pattern
      # with the update.php front controller.  This allows legacy path aliases in the form of
      # blog/index.php/legacy-path to continue to route to Drupal nodes. If you do not have
      # any paths like that, then you might prefer to use a laxer rule, such as:
      #   location ~ \.php(/|$) {
      # The laxer rule will continue to work if Drupal uses this new URL pattern with front
      # controllers other than update.php in a future release.
      location ~ '\.php$|^/update.php' {
        # Adding this to prevent requests to specific php files that do not exist
        # If things are breaking, remove this first - MEA
        try_files $uri =404;

        fastcgi_split_path_info ^(.+?\.php)(|/.*)$;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
        fastcgi_intercept_errors on;

        fastcgi_param HTTPS on;

        fastcgi_buffers 32 32k;
        fastcgi_buffer_size 32k;

        # Start xdebug config
        # Setting cookie or args in request will pass off to xdebug php
        if ($http_cookie ~* "xdebug") {
          fastcgi_pass xdebug.{{ .Release.Namespace }}.svc.cluster.local:9000;
          break;
        }
        if ($args ~* "xdebug") {
          fastcgi_pass xdebug.{{ .Release.Namespace }}.svc.cluster.local:9000;
          break;
        }
        # End xdebug config

        fastcgi_pass php.{{ .Release.Namespace }}.svc.cluster.local:9000;
      }

      # Begin s3fs configuration

      # Drupal s3fs image styles need to be generated by php
      location ~ ^/s3/files/styles/ {
          rewrite ^/(.*)$ /index.php?q=$1;
      }

      # Links to regular styles will need to be redirected to s3 to be handled correctly.
      # Args (query params) retained in redirect for itok.
      # TODO - Most probably should be a 301 here
      location ~ ^/sites/.*/files/styles/(.*)$ {
        return 302 $scheme://$host/s3/files/styles/$1$is_args$args;
      }

      # In some cases, links to original images are written to /s3/files but will not be passed through a render process.
      # Redirect those files instead.
      # TODO - Solve this more permanently with a text filter - MEA
      location ~ /s3/files/(.*)$ {
        rewrite ^/s3/files/(.*)$ /sites/default/files/$1?$is_args$args;
      }

      # Drupal user uploaded files will no longer exist locally.
      # Proxy them to the bucket transparently.
      # Doing this rather than a permanent redirect so urls can remain the same and the transition is transparent.
      location ~ ^/(sites/.*/files)/(.*) {

        set $s3_base_path "{{ .Values.s3Filesystem.hostname }}/{{ .Values.s3Filesystem.bucket }}/s3fs-public";
        set $file_path $2;

        resolver         8.8.8.8 valid=300s ipv6=off;
        resolver_timeout 10s;

        # Remove gcs headers to prevent info leak
        # Not an actual security issue besides making it clear this is a proxy to gcs
        proxy_hide_header       x-goog-hash;
        proxy_hide_header       x-goog-generation;
        proxy_hide_header       x-goog-metageneration;
        proxy_hide_header       x-goog-stored-content-encoding;
        proxy_hide_header       x-goog-stored-content-length;
        proxy_hide_header       x-goog-storage-class;
        proxy_hide_header       x-guploader-uploadid;

        # Dont pass extra headers to gcs - these should never be used on the gcs end.
        proxy_set_header cookie "";
        proxy_set_header authorization "";
        proxy_set_header connection "";

        # Clear any cache based headers as well, we want a fresh 200 every time. Varnish is the caching layer.
        proxy_set_header if-none-match "";
        proxy_set_header if-modified-since "";
        proxy_set_header cache-control "no-cache";

        # Show nginx errors instead of proxying gcs errors.
        proxy_intercept_errors on;

        # GCS uses 1.1.
        proxy_http_version 1.1;

        # Do not buffer/cache, varnish is assumed to be a fast client.
        proxy_max_temp_file_size 0;
        proxy_buffering off;

        # Add cache headers
        expires max;
        add_header Cache-Control "public";

        # Args are important - drupal uses these to bust cache.
        proxy_pass https://$s3_base_path/$file_path$is_args$args;

      }

      # Javascript needs to be served from the same host, so it is reverse proxied here as well.
      # CSS is as well, but could be a redirect instead.
      location ~* ^/(s3fs-css|s3fs-js)/ {
        rewrite ^/(s3fs-css|s3fs-js)/(.*) /sites/default/files/$2;
      }

      # End s3fs configuration

      # Handle Drupal private files
      location ~ ^/system/files/.* {
        try_files $uri @rewrite;
      }

      # Cache all static file types that are not in a Drupal managed filesystem.
      location ~* \.(7z|avi|bmp|bz2|csv|doc|docx|eot|flac|flv|gif|ico|jpeg|jpg|mka|mkv|mov|mp3|mp4|mpeg|mpg|odt|otf|ogg|ogm|opus|pdf|png|ppt|pptx|rar|rtf|svg|svgz|swf|tar|tbz|tgz|ttf|txz|wav|webm|webp|woff|woff2|xls|xlsx|xz|zip)$ {
        expires max;
      }

      # TODO - Make arrowchat support optional
      location ~ ^/arrowchat {
        index index.php index.html;
      }

      # TODO - Merge with 'js' section below, check TODO there - MEA
      # Cache sites/default/files (generated) css/js
      # Rather than caching ALL css/js forever, in particular CKEditor CSS includes should ignore cache
      location ~ ^/sites/.*/files/.*\.css$ {
        add_header Cache-Control "public";
        expires max;
      }

      # Cache sites/default/files (generated) css/js
      # Rather than caching ALL css/js forever, in particular CKEditor CSS includes should ignore cache
      location ~ ^/sites/.*/files/.*\.js$ {
        # TODO - Check if Cache-Control "public" is safe for Drupal javascript - MEA
        expires max;
      }
    }
  nginx.conf: |
    user  nginx;
    worker_processes  1;
    error_log  /var/log/nginx/error.log warn;
    pid        /var/run/nginx.pid;
    events {
        worker_connections  4096;
    }
    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;
        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';

        client_body_buffer_size 200m;
        client_max_body_size 200m;

        # Do not print nginx version in requests
        server_tokens off;

        access_log  /var/log/nginx/access.log  main;

        keepalive_timeout  20;
        client_body_timeout 30;
        client_header_timeout 30;

        # Allow server to close connection after client stops responding.
        # TODO - Re-enable and test on load.  Was disabled on high load application - MEA
        # reset_timedout_connection on;

        # Add server host name as a header for traceability
        add_header X-Backend-Server $hostname;

        gzip on;
        gzip_comp_level 2;
        gzip_min_length 1000;
        gzip_disable "msie6";
        gzip_types text/plain text/css application/json application/x-javascript application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml application/font-woff;
        gzip_vary on;
        gzip_proxied any;
        gzip_buffers 16 8k;
        include /etc/nginx/default.conf;
    }
